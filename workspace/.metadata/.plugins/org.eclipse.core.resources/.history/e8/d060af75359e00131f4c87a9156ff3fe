package model.board;

import java.util.Observable;
import java.util.Stack;

import model.Phase;
import move.AbstractMove;
import interfaces.BoardDetailsInterface;
import interfaces.BoardMutatorInterface;
import interfaces.MoveInterface;

public class BoardModel extends Observable implements BoardDetailsInterface, BoardMutatorInterface {
	
	private String state;
	private Stack<AbstractMove> history;
	private int playerOneToPlace, playerTwoToPlace;
	private int playerOneRemaining, playerTwoRemaining;
	private Phase phase;
	private char turn;
	
	public BoardModel(){
		
		state = "NNNNNNNNNNNNNNNNNNNNNNNN";
		history = new Stack<AbstractMove>();
		
		playerOneToPlace = 9;
		playerTwoToPlace = 9;
		playerOneRemaining = 9;
		playerTwoRemaining = 9;
		
		phase = Phase.ONE;
		
		turn = 'R';
		
	}

	@Override
	public void executeMove(AbstractMove move) {
		history.push(move);
		//TODO finish execute move method.
		
	}

	@Override
	public void undo() {
		AbstractMove move = history.pop();
		//TODO finish undo method.
	}

	@Override
	public void reset() {
		
		state = "NNNNNNNNNNNNNNNNNNNNNNNN";
		history = new Stack<AbstractMove>();
		
		playerOneToPlace = 9;
		playerTwoToPlace = 9;
		playerOneRemaining = 9;
		playerTwoRemaining = 9;
		
		phase = Phase.ONE;
		
		turn = 'R';
	}

	@Override
	public String getState() {
		return state;
	}

	@Override
	public int getPlayerOneToPlace() {
		return playerOneToPlace;
	}

	@Override
	public int getPlayerTwoToPlace() {
		return playerTwoToPlace;
	}

	@Override
	public int getPlayerOneRemaining() {
		return playerOneRemaining;
	}

	@Override
	public int getPlayerTwoRemaining() {
		return playerTwoRemaining;
	}

	@Override
	public Phase getPhase() {
		return phase;
	}

	@Override
	public int getTurn() {
		if(turn == 'R'){
			return 1;
		}else{
			return 2;
		}
	}

	@Override
	public boolean gameWon() {
		if(playerOneRemaining == 2 || playerTwoRemaining == 2){
			return true;
		}else{
			return false;
		}
	}

}
