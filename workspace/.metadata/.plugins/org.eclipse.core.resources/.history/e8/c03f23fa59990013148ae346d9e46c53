package players;

import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.Random;
import java.util.Stack;

import controller.MoveChecker;

import model.Phase;
import model.board.BoardDetails;

import players.MCTS.Move;

import interfaces.IntPairInterface;
import interfaces.PlayerInterface;

public class MCTSAI implements PlayerInterface, Observer {
	
	private BoardDetails bd;
	private TreeNode root;

	@Override
	public int placeToken(String state) {
		Move m = getMove('P');
		return m.getPlacementIndex();
	}

	@Override
	public int removeToken(String state) {
		Move m = getMove('R');
		return m.getRemovalIndex();
	}

	@Override
	public IntPairInterface moveToken(String state) {
		Move m = getMove('M');
		return m.getMovementIndexs();
	}
	
	private Move getMove(char action){
		MoveChecker mc = new MoveChecker();
		
		List<Move> moves = mc.getAllPossibleMoves(action, getTokenColour(), bd);
		
		if(moves.size() == 1){
			return moves.get(0);
		}
		
		root = new TreeNode(null, new MCTSGame(bd));
		
		long stop = System.currentTimeMillis() + 1000;
		
		while(System.currentTimeMillis() < stop){
			root.selectAction();
		}
		
	}

	@Override
	public String getName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setTokenColour(char c) {
		// TODO Auto-generated method stub

	}

	@Override
	public char getTokenColour() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void update(Observable arg0, Object arg1) {
		if(arg1 instanceof BoardDetails){
			bd = (BoardDetails) arg1;
		}
	}
	
	private class TreeNode{
		
		private MCTSGame game;
		private Random r;
		private Move move;
		private double epsilon;
		
		TreeNode[] children;
		double nVisits;
		double[] rewards;
		
		public TreeNode(Move move, MCTSGame game){
			this.move = move;
			this.game = game;
			
			epsilon = 1e-6;
			
			rewards = new double[2];
		}
	}
	
	private class MCTSGame{
		
		private String state;
		private Stack<Move> history;
		private char turn;
		private int playerOneTokensToPlace, playerTwoTokensToPlace;
		private int playerOneTokensRemaining, playerTwoTokensRemaining;
		private Phase phase;
		
		public MCTSGame(String state, char turn, int playerOneTTP, int playerTwoTTP, int playerOneTR, int playerTwoTR, Phase phase){
			
			this.state = state;
			this.turn = turn;
			
			playerOneTokensToPlace = playerOneTTP;
			playerTwoTokensToPlace = playerTwoTTP;
			playerOneTokensRemaining = playerOneTR;
			playerTwoTokensRemaining = playerTwoTR;
			
			this.phase = phase;
			
			history = new Stack<Move>();
		}
		
		public MCTSGame(BoardDetails bd){
			state = bd.getGS();
			turn = bd.getTurn();
			playerOneTokensToPlace = bd.getPlayerOneToPlace();
			playerTwoTokensToPlace = bd.getPlayerTwoToPlace();
			playerOneTokensRemaining = bd.getPlayerOneRemaining();
			playerTwoTokensRemaining = bd.getPlayerTwoRemaining();
			phase = bd.getPhase();
		}
		
		public BoardDetails getDetails(){
			return new BoardDetails(state, -2, playerOneTokensRemaining, playerTwoTokensRemaining, playerOneTokensToPlace, playerTwoTokensToPlace, turn, phase);
		}
		
	}

}
